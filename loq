#!/bin/bash

set -euo pipefail

# Set up directories
LOQ_DIR="$HOME/.loq"
TMP_DIR="$LOQ_DIR/tmp"
CONFIG_FILE="$LOQ_DIR/keys"
STATS_FILE="$LOQ_DIR/stats.tsv"
LOG_FILE="$LOQ_DIR/loq.log"
HUD_TIMEOUT=2

# Ensure all required directories exist
mkdir -p "$LOQ_DIR" "$TMP_DIR" "$LOQ_DIR/recordings"
touch "$TMP_DIR/notification_id"  # Create empty notification ID file if it doesn't exist

# Function to log errors
log_error() {
  echo "$(date -u +"%Y-%m-%d %H:%M:%S") ERROR: $1" >> "$LOG_FILE"
}

# Function to display notification
notify() {
  NOTIFICATION_ID=$(notify-send "$1" "$2" -e -u critical --print-id -t 0)
  echo $NOTIFICATION_ID >"$TMP_DIR/notification_id"
}

# Function to close notification
close_notification() {
  if [ -s "$TMP_DIR/notification_id" ]; then  
    local id=$(cat "$TMP_DIR/notification_id")
    gdbus call --session --dest=org.freedesktop.Notifications --object-path=/org/freedesktop/Notifications --method=org.freedesktop.Notifications.CloseNotification "$id" >/dev/null
  fi
}

# Function to start recording
start_recording() {
  close_notification
  local timestamp=$(date -u +"%Y%m%dT%H%M%SZ")
  local audio="$LOQ_DIR/recordings/$timestamp.wav"
  touch "$audio"
  echo $audio > "$TMP_DIR/audio"
  
  # Create lock file to indicate recording is in progress
  touch "$TMP_DIR/recording.lock"
  
  # Display recording notification
  notify "Recording..." "🎙️ Recording has started"
  
  # Start recording
  rec -c 1 -r 16000 -t wav "$audio" &
  echo $! > "$TMP_DIR/recording_pid"
  
  # Set a timeout to automatically stop recording after a certain period (e.g., 1 hour)
  (sleep 3600 && stop_recording) &
  echo $! > "$TMP_DIR/cleanup_pid"
}

# Function to stop recording and process the audio
stop_recording() {
  if [ ! -f "$TMP_DIR/recording.lock" ]; then
    log_error "No recording in progress"
    exit 1
  fi

  sleep 0.2 # seems we need to pad slightly for whisper to get the last word

  local pid=$(cat "$TMP_DIR/recording_pid")
  kill $pid

  local pid=$(cat "$TMP_DIR/cleanup_pid")
  kill -HUP $pid

  # Remove lock file to indicate recording is stopped
  rm -f "$TMP_DIR/recording.lock"

  local audio=$(cat "$TMP_DIR/audio")
  local mp3_audio="${audio%.wav}.mp3"
  local transcript="${audio%.wav}.txt"
  
  # Convert wav to mp3
  lame -V 4 "$audio" "$mp3_audio"
  if [ $? -ne 0 ]; then
    log_error "Failed to convert wav to mp3"
    exit 1
  fi

  # Close processing notification
  close_notification
  
  # Display notification for sending to Whisper API
  audio_kb=$(du -k "$mp3_audio" | cut -f1)
  notify "Sending to Whisper..." "🔊 Sending $audio_kb KB audio to Whisper API"
  
  # Send audio file to OpenAI Whisper API using curl
  local start_time=$(date +%s.%N)
  local response=$(curl -s -X POST -H "Authorization: Bearer $LOQ_API_KEY" \
    -H "Content-Type: multipart/form-data" \
    -F file="@$mp3_audio" \
    -F model=$LOQ_API_MODEL \
    -F response_format="text" \
    $LOQ_API_URL )
  # trim leading and trailing whitespace from response
  response=$(echo "$response" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  if [ $? -ne 0 ]; then
    log_error "Failed to send audio to Whisper API"
    exit 1
  fi
  local end_time=$(date +%s.%N)

  # Save transcription to a text file
  echo "$response" > "$transcript"
  
  # Clean up wav of recording
  rm -f "$audio"
  
  # Extract statistics from response and calculate additional stats
  local word_count=$(echo "$response" | wc -w)
  local recording_duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$mp3_audio")
  local words_per_second=$(echo "scale=2; $word_count / $recording_duration" | bc)
  local words_per_minute=$(echo "scale=2; $words_per_second * 60" | bc)
  local processing_time=$(echo "$end_time - $start_time" | bc)
  local utc_time=$(date -u +"%Y%m%dT%H%M%SZ")
  local local_time=$(date +"%Y%m%dT%H%M%SZ")
  local microseconds_since_1970=$(date +%s%6N)
  
  # Append statistics to stats file
  if [ ! -s "$STATS_FILE" ]; then
    echo -e "Microsec_Since_1970\tUTC_Time\tLocal_Time\tDuration_Sec\tWord_Count\tWPS\tWPM\tProcessing_Sec" > "$STATS_FILE"
  fi
  echo -e "$microseconds_since_1970\t$utc_time\t$local_time\t$recording_duration\t$word_count\t$words_per_second\t$words_per_minute\t$processing_time" >> "$STATS_FILE"
  
  # Save statistics to a .stats file attached to the recording
  local stats_data=$(echo -e "$microseconds_since_1970\t$utc_time\t$local_time\t$recording_duration\t$word_count\t$words_per_second\t$words_per_minute\t$processing_time")
  echo -e "$stats_data" > "${audio%.wav}.stats"

  close_notification
  # show a notification with stats (words, duration, words per second, words per minute) and processing time, as 'X words / Ys, Z wpm, Qs proc'
  # try again, make sure to round to 2 decimal places
  words_per_second=$(printf "%.2f" $words_per_second)
  words_per_minute=$(printf "%.2f" $words_per_minute)
  processing_time=$(printf "%.2f" $processing_time)
  recording_duration=$(printf "%.2f" $recording_duration)
  notify "Transcription Complete" "🔊 $word_count words / $recording_duration s, $words_per_minute wpm, processed in $processing_time s "

  # Copy response to clipboard
  echo -n "$response" | xclip -sel clip
  
  # Simulate the paste action
  xdotool key ctrl+v

  # Close processing response notification
  (sleep $HUD_TIMEOUT && close_notification) &
}

# Function to toggle recording
toggle_recording() {
  if [ -f "$TMP_DIR/recording.lock" ]; then
    # If recording.lock file exists, stop the recording
    stop_recording
  else
    # If recording.lock file does not exist, start the recording
    start_recording
  fi
}

if [ ! -f "$CONFIG_FILE" ]; then
  log_error "API key not found. Please add your OpenAI API key to $CONFIG_FILE"
  exit 1
fi

source "$CONFIG_FILE"

if [ -z "$LOQ_API_KEY" ]; then
  log_error "API key not found. Please add your API key to $CONFIG_FILE"
  exit 1
fi

if [ -z "$LOQ_API_MODEL" ]; then
  log_error "API model not found. Please add your model to $CONFIG_FILE"
  exit 1
fi

if [ -z "$LOQ_API_URL" ]; then
  log_error "API URL not found. Please add your API URL to $CONFIG_FILE"
  exit 1
fi


if [ ! -d "$LOQ_DIR/recordings" ]; then
  mkdir -p "$LOQ_DIR/recordings"
fi

if [ ! -d "$TMP_DIR" ]; then
  mkdir -p "$TMP_DIR"
fi

if [ ! -f "$STATS_FILE" ]; then
  touch "$STATS_FILE"
fi

# if we have no args print help
if [ $# -eq 0 ]; then
  echo "Usage: $0 {start|stop|toggle}"
  exit 1
fi

# Main script logic
case "$1" in
  start)
    start_recording
    ;;
  stop)
    stop_recording
    ;;
  toggle)
    toggle_recording
    ;;
esac
